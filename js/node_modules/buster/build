#!/usr/bin/env node

var path = require("path");
var util = require("util");
var exec = require("child_process").exec;
var fs = require("fs");

var cwd = process.cwd();
process.chdir(path.dirname(path.dirname(require.resolve("sinon"))));

exec("ruby -rubygems build", function (error, stdout, stderr) {
    if (error !== null) {
        console.log("Failed building Sinon.JS " + error);
    } else {
        buildBuster(stdout.match(/(\d\.\d\.\d)/)[1]);
    }
});

function buildBuster(sinonVersion) {
    process.cwd(cwd);
    var files = [];
    var read = 0;

    function finish() {
        if (read == fileNames.length) {
            var fileName = path.resolve(cwd, "resources/buster-test.js");

            fs.writeFile(fileName, files.join("\n"), function (err) {
                if (err) {
                    console.log("Failed building resources/buster-test.js: " + err.message);
                } else {
                    var kb = Math.floor(files.join("\n").length / 10.24) / 100;
                    console.log("Built resources/buster-test.js (" + kb + "kB)");
                }
            });
        }
    }

    var fileNames = [
        "buster-core/lib/buster-core",
        "buster-core/lib/buster-event-emitter",
        "buster-format/lib/buster-format",
        "buster-assertions/lib/buster-assertions",
        "buster-assertions/lib/buster-assertions/expect",
        "buster-promise/lib/buster-promise",
        "buster-evented-logger/lib/buster-evented-logger",
        "buster-test/lib/buster-test/stack-filter",
        "buster-test/lib/buster-test/spec",
        "buster-test/lib/buster-test/test-case",
        "buster-test/lib/buster-test/test-runner",
        "buster-test/lib/buster-test/reporters",
        "buster-test/lib/buster-test/reporters/html",
        "buster-test/lib/buster-test/auto-run",
        "buster-test/lib/buster-test/test-context",
        "buster-test/lib/buster-test",
        "sinon/pkg/sinon-" + sinonVersion,
        "sinon-buster/lib/sinon-buster",
        "lib/buster/buster-wiring.js",
        "lib/buster.js"];

    fileNames.forEach(function (fileName, i) {
        try {
            fileName = require.resolve(fileName);
        } catch (e) {
            fileName = path.resolve(cwd, fileName);
        }

        fs.readFile(fileName, "utf-8", function (err, data) {
            if (err) throw err;
            files[i] = data;
            read += 1;
            finish();
        });
    });
}
