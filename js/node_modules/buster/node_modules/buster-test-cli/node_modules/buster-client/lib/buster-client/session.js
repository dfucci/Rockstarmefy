var http = require("http");
var buster = require("buster-core");
var responseBody = require("./util").responseBody;
var bPromise = require("buster-promise");
var faye = require("faye");
var bayeuxEmitter = require("buster-bayeux-emitter");

module.exports = {
    create: function (bayeuxClient, opt) {
        return buster.extend(Object.create(this), {
            clients: opt.clients || [],
            rootPath: opt.rootPath,
            host: opt.host || "localhost",
            port: opt.port || 1111,
            bayeuxClient: bayeuxClient,
            managed: opt.managed
        });
    },

    connect: function (callback) {
        if (this.messagingClient || !this.bayeuxClient) return callback();
        this.messagingClient = bayeuxEmitter.create(this.bayeuxClient);

        this.messagingClient.connect(function () {
            if (this.managed) this.bayeuxClient.publish("/session-owner");
            if (typeof callback == "function") callback();
        }.bind(this));
    },

    createFromHttpResponse: function (res, opt) {
        var options, session, promise = bPromise.create();

        responseBody(res, function (body) {
            try {
                options = buster.extend(JSON.parse(body), opt);
            } catch (e) {
                return promise.reject(e);
            }

            session = this.create(messagingClient(options), options);
            session.connect(function () { promise.resolve(session); });
        }.bind(this));

        return promise;
    },

    on: function (event, callback) {
        requireMessagingClient(this);
        this.messagingClient.on(event, callback);
    },

    emit: function (event, data) {
        requireMessagingClient(this);
        this.messagingClient.emit(event, data);
    },

    onMessage: function (callback) {
        requireMessagingClient(this);
        this.messagingClient.onMessage(callback);
    },

    close: function () {
        if (this.messagingClient) {
            this.messagingClient.disconnect();
        }

        var promise = bPromise.create();

        var reqData = {
            method: "DELETE",
            host: this.host,
            port: this.port,
            path: this.rootPath
        };

        var req = http.request(reqData, function (res) {
            if (res.statusCode == 200) {
                promise.resolve();
            } else {
                promise.reject(new Error("Session close failed, " + res.statusCode));
            }
        });

        req.end();

        req.on("error", function (err) {
            try { promise.reject(err); } catch (e) { /* One error is enough */ }
        });

        return promise;
    }
};

function requireMessagingClient(session) {
    if (!session.messagingClient) {
        throw new TypeError("Session has no messaging client");
    }
}

function messagingClient(options) {
    var path = options.bayeuxClientPath;
    if (!path) return null;
    var url = "http://" + options.host + ":" + options.port + path;
    return new faye.Client(url);
}
